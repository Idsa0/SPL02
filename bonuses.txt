BONUS CHALLENGE FORM
--------------------

For each bonus challenge you have implemented, please replace the sentence "We are not entitled to this bonus."
with a short description of:

1. How it was implemented in your code
2. Where it was used (in which class methods).
3. How you tested that it is working correctly.

--------------------

1. Fully supporting all configuration fields and avoiding the use of magic numbers

1. Whenever the dealer places new cards on the table if hints are enabled we print them.
Beyond that, every time a number is used, we instead use the correct field from env.config.

2. in most class methods

3. we used the configuration options which are relevant and manually tested them to be working with the logs,
and there are no magic numbers in the code.
--------------------

2. Terminating all threads (that you created) gracefully and in reverse order to the order they were created in.

1. the dealer threads creates the players threads and waits till they finish initailizations, so 
we know that the computer threads were created in the expected order (before the next player thread)
then at termination time the dealer thread calls in reverse order to the terminations and performs
join() between each terminate.

2. it was implemented mainly in the Dealer.run(), with some minor functions like player.join() created
to expose functionality.

3. by looking at the logs.

--------------------

3. Handling the config.turnTimeoutMillis value as follows:
config.turnTimeoutMillis < 0: display nothing.
config.turnTimeoutMillis = 0: display a timer since the last action (reshuffle or set collected).
Note: in modes without a countdown timer the dealer must ensure there is always at least one legal set on the table.

1. there is an ENUM recording in which mode the system is, and logic is changed based on said ENUM, particularly
in the updateTimerDisplay where each ENUM option has relevant code

2. mainly in updateTimerDisplay but also in the constructor

3. We manually ran all options and tested it worked correctly.

--------------------

4. Making sure that the threads do not wake up unless some actual job needs to be done (e.g., a value needs to be
changed on the display, key input needs to be handled, etc.) and the only threads created by you are:
1 thread per player + 1 additional thread for non-human players.

1. all threads are woken up only when needed. Player threads wait if there is no input, and the player/dealer waits until
the time has come to update the timer display (player updates their freeze timer), or a player has asked for a set to be
checked. There are no other notifies or interrupts in the code except for the .terminate() ones and the initialization ones.
As for the threads, no extra threads are created.

2. This mainly concerns the .run() of the threads, and in not creating additional threads.

3. we manually checked no additional threads are created in the debugger, and by the way the code is written threads
can not be woken up without reason.
